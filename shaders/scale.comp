#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform sampler2D inputImage;
layout(binding = 1, rgba8) uniform image2D outputImage;

layout(push_constant) uniform PushConstants {
    ivec2 inputSize;
    ivec2 outputSize;
} pc;

// Lanczos filter parameters
const float LANCZOS_A = 3.0;

float lanczos(float x) {
    if (x == 0.0) return 1.0;
    float px = 3.14159265359 * x;
    return LANCZOS_A * sin(px) * sin(px / LANCZOS_A) / (px * px);
}

vec4 sampleLanczos(sampler2D tex, vec2 uv) {
    vec2 texelSize = 1.0 / vec2(pc.inputSize);
    vec2 pixelPos = uv * vec2(pc.inputSize) - 0.5;
    vec2 f = fract(pixelPos);
    vec2 start = floor(pixelPos) - vec2(LANCZOS_A - 1.0);

    vec4 color = vec4(0.0);
    float totalWeight = 0.0;

    for (float y = 0.0; y < 2.0 * LANCZOS_A; y++) {
        for (float x = 0.0; x < 2.0 * LANCZOS_A; x++) {
            vec2 samplePos = (start + vec2(x, y) + 0.5) * texelSize;
            if (any(lessThan(samplePos, vec2(0.0))) || 
                any(greaterThan(samplePos, vec2(1.0)))) {
                continue;
            }

            vec2 delta = vec2(x - f.x - (LANCZOS_A - 1.0),
                             y - f.y - (LANCZOS_A - 1.0));
            float weight = lanczos(delta.x) * lanczos(delta.y);

            color += texture(tex, samplePos) * weight;
            totalWeight += weight;
        }
    }

    return color / totalWeight;
}

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (pixel.x >= pc.outputSize.x || pixel.y >= pc.outputSize.y) {
        return;
    }

    vec2 uv = (vec2(pixel) + 0.5) / vec2(pc.outputSize);
    vec4 color = sampleLanczos(inputImage, uv);
    
    imageStore(outputImage, pixel, color);
}
